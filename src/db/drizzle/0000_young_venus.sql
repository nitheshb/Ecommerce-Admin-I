-- Current sql file was generated after introspecting the database
-- If you want to run this migration please uncomment this code before executing migrations
/*
CREATE TABLE "notes" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "notes_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"userId" text NOT NULL,
	"text" text,
	"updated_at" timestamp DEFAULT now() NOT NULL
);
--> statement-breakpoint
ALTER TABLE "notes" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "migrations" (
	"id" serial PRIMARY KEY NOT NULL,
	"migration" varchar(255) NOT NULL,
	"batch" integer NOT NULL
);
--> statement-breakpoint
CREATE TABLE "translations" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"status" integer DEFAULT 1 NOT NULL,
	"locale" varchar(255) NOT NULL,
	"group" varchar(255) NOT NULL,
	"key" varchar(255) NOT NULL,
	"value" text,
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	CONSTRAINT "translations_group_key_locale_unique" UNIQUE("locale","group","key")
);
--> statement-breakpoint
CREATE TABLE "password_resets" (
	"email" varchar(255) NOT NULL,
	"token" varchar(255) NOT NULL,
	"created_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "telescope_entries" (
	"sequence" bigserial PRIMARY KEY NOT NULL,
	"uuid" uuid NOT NULL,
	"batch_id" uuid NOT NULL,
	"family_hash" varchar(255),
	"should_display_on_index" boolean DEFAULT true NOT NULL,
	"type" varchar(20) NOT NULL,
	"content" text NOT NULL,
	"created_at" timestamp(0),
	CONSTRAINT "telescope_entries_uuid_unique" UNIQUE("uuid")
);
--> statement-breakpoint
CREATE TABLE "telescope_monitoring" (
	"tag" varchar(255) PRIMARY KEY NOT NULL
);
--> statement-breakpoint
CREATE TABLE "failed_jobs" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"uuid" varchar(255) NOT NULL,
	"connection" text NOT NULL,
	"queue" text NOT NULL,
	"payload" text NOT NULL,
	"exception" text NOT NULL,
	"failed_at" timestamp(0) DEFAULT CURRENT_TIMESTAMP NOT NULL,
	CONSTRAINT "failed_jobs_uuid_unique" UNIQUE("uuid")
);
--> statement-breakpoint
CREATE TABLE "personal_access_tokens" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"tokenable_type" varchar(255) NOT NULL,
	"tokenable_id" bigint NOT NULL,
	"name" varchar(255) NOT NULL,
	"token" varchar(64) NOT NULL,
	"abilities" text,
	"last_used_at" timestamp(0),
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	CONSTRAINT "personal_access_tokens_token_unique" UNIQUE("token")
);
--> statement-breakpoint
CREATE TABLE "languages" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"title" varchar(255),
	"locale" varchar(255) NOT NULL,
	"backward" boolean DEFAULT false NOT NULL,
	"default" boolean DEFAULT false NOT NULL,
	"active" boolean DEFAULT true NOT NULL,
	"img" varchar(255),
	CONSTRAINT "languages_locale_unique" UNIQUE("locale")
);
--> statement-breakpoint
CREATE TABLE "currencies" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"symbol" varchar(255),
	"title" varchar(191) NOT NULL,
	"rate" double precision DEFAULT '1' NOT NULL,
	"position" varchar(255) DEFAULT 'after' NOT NULL,
	"default" boolean DEFAULT false NOT NULL,
	"active" boolean DEFAULT true NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	"short_code" varchar(255),
	CONSTRAINT "currencies_position_check" CHECK (("position")::text = ANY ((ARRAY['before'::character varying, 'after'::character varying])::text[]))
);
--> statement-breakpoint
CREATE TABLE "categories" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"uuid" uuid NOT NULL,
	"keywords" varchar(191),
	"parent_id" bigint DEFAULT '0' NOT NULL,
	"type" smallint DEFAULT '1' NOT NULL,
	"img" varchar(255),
	"active" boolean DEFAULT true NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	"deleted_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "category_translations" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"category_id" bigint NOT NULL,
	"locale" varchar(255) NOT NULL,
	"title" varchar(191) NOT NULL,
	"description" text,
	CONSTRAINT "category_translations_category_id_locale_unique" UNIQUE("category_id","locale")
);
--> statement-breakpoint
CREATE TABLE "permissions" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"name" varchar(255) NOT NULL,
	"guard_name" varchar(255) NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	CONSTRAINT "permissions_name_guard_name_unique" UNIQUE("name","guard_name")
);
--> statement-breakpoint
CREATE TABLE "roles" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"name" varchar(255) NOT NULL,
	"guard_name" varchar(255) NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	CONSTRAINT "roles_name_guard_name_unique" UNIQUE("name","guard_name")
);
--> statement-breakpoint
CREATE TABLE "galleries" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"title" varchar(255) NOT NULL,
	"loadable_type" varchar(255) NOT NULL,
	"loadable_id" bigint NOT NULL,
	"type" varchar(255),
	"path" varchar(255),
	"mime" varchar(255),
	"size" varchar(255)
);
--> statement-breakpoint
CREATE TABLE "sessions" (
	"id" varchar(255) PRIMARY KEY NOT NULL,
	"user_id" bigint,
	"ip_address" varchar(45),
	"user_agent" text,
	"payload" text NOT NULL,
	"last_activity" integer NOT NULL
);
--> statement-breakpoint
CREATE TABLE "meta_tags" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"path" varchar(255),
	"model_id" integer,
	"model_type" varchar(255),
	"title" varchar(255),
	"keywords" varchar(255),
	"description" text,
	"h1" varchar(255),
	"seo_text" text,
	"canonical" varchar(255),
	"robots" varchar(255),
	"changefreq" varchar(10),
	"priority" varchar(10),
	"created_at" timestamp(0),
	"updated_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "brands" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"uuid" uuid NOT NULL,
	"title" varchar(255) NOT NULL,
	"active" boolean DEFAULT true NOT NULL,
	"img" varchar(255),
	"created_at" timestamp(0),
	"updated_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "shop_translations" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"shop_id" bigint NOT NULL,
	"locale" varchar(255) NOT NULL,
	"title" varchar(191) NOT NULL,
	"description" text,
	"address" varchar(255),
	CONSTRAINT "shop_translations_shop_id_locale_unique" UNIQUE("shop_id","locale")
);
--> statement-breakpoint
CREATE TABLE "invitations" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"shop_id" bigint NOT NULL,
	"user_id" bigint NOT NULL,
	"role" varchar(255),
	"status" smallint DEFAULT '1' NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "shop_subscriptions" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"shop_id" bigint NOT NULL,
	"subscription_id" bigint NOT NULL,
	"expired_at" date,
	"price" double precision,
	"type" varchar(255),
	"active" boolean DEFAULT false NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "deliveries" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"shop_id" bigint,
	"type" varchar(255) DEFAULT 'standard' NOT NULL,
	"price" double precision DEFAULT '0' NOT NULL,
	"times" varchar(255),
	"note" varchar(191),
	"default" boolean DEFAULT false NOT NULL,
	"active" boolean DEFAULT true NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "delivery_translations" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"delivery_id" bigint NOT NULL,
	"locale" varchar(255) NOT NULL,
	"title" varchar(191) NOT NULL,
	CONSTRAINT "delivery_translations_delivery_id_locale_unique" UNIQUE("delivery_id","locale")
);
--> statement-breakpoint
CREATE TABLE "subscriptions" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"type" varchar(255) DEFAULT 'orders' NOT NULL,
	"price" double precision NOT NULL,
	"month" smallint NOT NULL,
	"active" boolean NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	"deleted_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "shops" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"uuid" uuid NOT NULL,
	"user_id" bigint NOT NULL,
	"tax" double precision DEFAULT '0' NOT NULL,
	"delivery_range" integer,
	"percentage" double precision DEFAULT '0' NOT NULL,
	"location" varchar(255),
	"phone" varchar(255),
	"show_type" smallint,
	"open" boolean DEFAULT true NOT NULL,
	"visibility" boolean DEFAULT true NOT NULL,
	"open_time" time(0) NOT NULL,
	"close_time" time(0) NOT NULL,
	"background_img" varchar(191),
	"logo_img" varchar(191),
	"min_amount" double precision DEFAULT '0.1' NOT NULL,
	"status" varchar(255) DEFAULT 'new' NOT NULL,
	"status_note" text,
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	"deleted_at" timestamp(0),
	"mark" varchar(255),
	CONSTRAINT "shops_status_check" CHECK ((status)::text = ANY ((ARRAY['new'::character varying, 'edited'::character varying, 'approved'::character varying, 'rejected'::character varying, 'inactive'::character varying])::text[]))
);
--> statement-breakpoint
CREATE TABLE "units" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"active" boolean DEFAULT true NOT NULL,
	"position" varchar(255) DEFAULT 'after' NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	CONSTRAINT "units_position_check" CHECK (("position")::text = ANY ((ARRAY['before'::character varying, 'after'::character varying])::text[]))
);
--> statement-breakpoint
CREATE TABLE "unit_translations" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"unit_id" bigint NOT NULL,
	"locale" varchar(255) NOT NULL,
	"title" varchar(191) NOT NULL,
	CONSTRAINT "unit_translations_unit_id_locale_unique" UNIQUE("unit_id","locale")
);
--> statement-breakpoint
CREATE TABLE "product_translations" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"product_id" bigint NOT NULL,
	"locale" varchar(255) NOT NULL,
	"title" varchar(191) NOT NULL,
	"description" text,
	CONSTRAINT "product_translations_product_id_locale_unique" UNIQUE("product_id","locale")
);
--> statement-breakpoint
CREATE TABLE "product_properties" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"product_id" bigint NOT NULL,
	"locale" varchar(255) NOT NULL,
	"key" varchar(191) NOT NULL,
	"value" text
);
--> statement-breakpoint
CREATE TABLE "products" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"uuid" uuid NOT NULL,
	"shop_id" bigint NOT NULL,
	"category_id" bigint NOT NULL,
	"unit_id" bigint,
	"keywords" varchar(191),
	"tax" double precision,
	"min_qty" integer,
	"max_qty" integer,
	"active" boolean DEFAULT false NOT NULL,
	"img" varchar(255),
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	"deleted_at" timestamp(0),
	"bar_code" varchar(255),
	"brand_id" bigint
);
--> statement-breakpoint
CREATE TABLE "settings" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"key" varchar(255) NOT NULL,
	"value" varchar(255),
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	CONSTRAINT "settings_key_unique" UNIQUE("key")
);
--> statement-breakpoint
CREATE TABLE "extra_groups" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"type" varchar(255),
	"active" boolean DEFAULT true NOT NULL
);
--> statement-breakpoint
CREATE TABLE "extra_group_translations" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"extra_group_id" bigint NOT NULL,
	"locale" varchar(255) NOT NULL,
	"title" varchar(191) NOT NULL,
	CONSTRAINT "extra_group_translations_extra_group_id_locale_unique" UNIQUE("extra_group_id","locale")
);
--> statement-breakpoint
CREATE TABLE "product_extras" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"product_id" bigint NOT NULL,
	"extra_group_id" bigint NOT NULL
);
--> statement-breakpoint
CREATE TABLE "extra_values" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"extra_group_id" bigint NOT NULL,
	"value" varchar(191) NOT NULL,
	"active" boolean DEFAULT true NOT NULL,
	"hex_color" varchar(255)
);
--> statement-breakpoint
CREATE TABLE "stocks" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"countable_type" varchar(255) NOT NULL,
	"countable_id" bigint NOT NULL,
	"price" double precision NOT NULL,
	"quantity" integer DEFAULT 0 NOT NULL,
	"deleted_at" timestamp(0),
	"url" text
);
--> statement-breakpoint
CREATE TABLE "order_details" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"order_id" bigint NOT NULL,
	"shop_id" bigint NOT NULL,
	"price" double precision NOT NULL,
	"tax" double precision DEFAULT '1' NOT NULL,
	"commission_fee" double precision,
	"status" varchar(255) DEFAULT 'new' NOT NULL,
	"delivery_address_id" bigint,
	"delivery_type_id" bigint,
	"delivery_fee" double precision DEFAULT '0' NOT NULL,
	"deliveryman" bigint,
	"delivery_date" date,
	"delivery_time" varchar(255),
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	"deleted_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "order_products" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"order_detail_id" bigint NOT NULL,
	"stock_id" bigint NOT NULL,
	"origin_price" double precision DEFAULT '0' NOT NULL,
	"total_price" double precision DEFAULT '0' NOT NULL,
	"tax" double precision DEFAULT '0' NOT NULL,
	"discount" double precision DEFAULT '0' NOT NULL,
	"quantity" integer DEFAULT 0 NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "order_coupons" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"user_id" bigint NOT NULL,
	"name" varchar(191) NOT NULL,
	"price" double precision,
	"order_id" bigint NOT NULL
);
--> statement-breakpoint
CREATE TABLE "product_discounts" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"product_id" bigint NOT NULL,
	"discount_id" bigint NOT NULL
);
--> statement-breakpoint
CREATE TABLE "coupons" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"shop_id" bigint NOT NULL,
	"name" varchar(255) NOT NULL,
	"type" varchar(255) DEFAULT 'fix' NOT NULL,
	"qty" integer DEFAULT 0 NOT NULL,
	"price" double precision DEFAULT '0' NOT NULL,
	"expired_at" timestamp(0) NOT NULL,
	"img" varchar(255),
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	CONSTRAINT "coupons_shop_id_name_unique" UNIQUE("shop_id","name"),
	CONSTRAINT "coupons_type_check" CHECK ((type)::text = ANY ((ARRAY['fix'::character varying, 'percent'::character varying])::text[]))
);
--> statement-breakpoint
CREATE TABLE "coupon_translations" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"coupon_id" bigint NOT NULL,
	"locale" varchar(255) NOT NULL,
	"title" varchar(191) NOT NULL,
	"description" text,
	CONSTRAINT "coupon_translations_coupon_id_locale_unique" UNIQUE("coupon_id","locale")
);
--> statement-breakpoint
CREATE TABLE "jobs" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"queue" varchar(255) NOT NULL,
	"payload" text NOT NULL,
	"attempts" smallint NOT NULL,
	"reserved_at" integer,
	"available_at" integer NOT NULL,
	"created_at" integer NOT NULL
);
--> statement-breakpoint
CREATE TABLE "reviews" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"reviewable_type" varchar(255) NOT NULL,
	"reviewable_id" bigint NOT NULL,
	"user_id" bigint NOT NULL,
	"rating" double precision DEFAULT '5' NOT NULL,
	"comment" text,
	"img" varchar(255),
	"created_at" timestamp(0),
	"updated_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "banners" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"shop_id" bigint,
	"url" varchar(191),
	"type" varchar(255) DEFAULT 'banner' NOT NULL,
	"products" text,
	"img" varchar(191),
	"active" boolean DEFAULT true NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	"deleted_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "banner_translations" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"banner_id" bigint NOT NULL,
	"locale" varchar(255) NOT NULL,
	"title" varchar(191) NOT NULL,
	"description" text,
	CONSTRAINT "banner_translations_banner_id_locale_unique" UNIQUE("banner_id","locale")
);
--> statement-breakpoint
CREATE TABLE "backup_histories" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"title" varchar(255) NOT NULL,
	"status" boolean DEFAULT true NOT NULL,
	"path" varchar(191),
	"created_by" bigint NOT NULL,
	"created_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "tickets" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"uuid" uuid NOT NULL,
	"created_by" bigint NOT NULL,
	"user_id" bigint,
	"order_id" bigint,
	"parent_id" bigint DEFAULT '0' NOT NULL,
	"type" varchar(255) DEFAULT 'question' NOT NULL,
	"subject" varchar(191) NOT NULL,
	"content" text NOT NULL,
	"status" varchar(255) DEFAULT 'open' NOT NULL,
	"read" boolean DEFAULT false NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	CONSTRAINT "tickets_status_check" CHECK ((status)::text = ANY ((ARRAY['open'::character varying, 'answered'::character varying, 'progress'::character varying, 'closed'::character varying, 'rejected'::character varying])::text[]))
);
--> statement-breakpoint
CREATE TABLE "stock_extras" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"stock_id" bigint NOT NULL,
	"extra_value_id" bigint NOT NULL
);
--> statement-breakpoint
CREATE TABLE "blogs" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"uuid" uuid NOT NULL,
	"user_id" bigint NOT NULL,
	"type" smallint DEFAULT '1' NOT NULL,
	"published_at" date,
	"active" boolean DEFAULT true NOT NULL,
	"img" varchar(191),
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	"deleted_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "blog_translations" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"blog_id" bigint NOT NULL,
	"locale" varchar(255) NOT NULL,
	"title" varchar(191) NOT NULL,
	"short_desc" varchar(191),
	"description" text,
	CONSTRAINT "blog_translations_blog_id_locale_unique" UNIQUE("blog_id","locale")
);
--> statement-breakpoint
CREATE TABLE "faqs" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"uuid" uuid NOT NULL,
	"type" varchar(255),
	"active" boolean DEFAULT true NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "faq_translations" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"faq_id" bigint NOT NULL,
	"locale" varchar(255) NOT NULL,
	"question" text NOT NULL,
	"answer" text,
	CONSTRAINT "faq_translations_faq_id_locale_unique" UNIQUE("faq_id","locale")
);
--> statement-breakpoint
CREATE TABLE "transactions" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"payable_type" varchar(255) NOT NULL,
	"payable_id" bigint NOT NULL,
	"price" double precision NOT NULL,
	"user_id" bigint,
	"payment_sys_id" bigint,
	"payment_trx_id" varchar(255),
	"note" varchar(255),
	"perform_time" timestamp(0),
	"refund_time" timestamp(0),
	"status" varchar(255) DEFAULT 'progress' NOT NULL,
	"status_description" varchar(255) NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	"deleted_at" timestamp(0),
	CONSTRAINT "transactions_status_check" CHECK ((status)::text = ANY ((ARRAY['progress'::character varying, 'paid'::character varying, 'canceled'::character varying, 'rejected'::character varying])::text[]))
);
--> statement-breakpoint
CREATE TABLE "wallets" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"uuid" uuid NOT NULL,
	"user_id" bigint NOT NULL,
	"currency_id" bigint NOT NULL,
	"price" double precision DEFAULT '0' NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	"deleted_at" timestamp(0),
	CONSTRAINT "wallets_uuid_user_id_unique" UNIQUE("uuid","user_id")
);
--> statement-breakpoint
CREATE TABLE "wallet_histories" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"uuid" uuid NOT NULL,
	"wallet_uuid" uuid NOT NULL,
	"transaction_id" bigint,
	"type" varchar(255) DEFAULT 'topup' NOT NULL,
	"price" double precision DEFAULT '0' NOT NULL,
	"note" varchar(255),
	"status" varchar(255) DEFAULT 'processed' NOT NULL,
	"created_by" bigint NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	CONSTRAINT "wallet_histories_uuid_unique" UNIQUE("uuid"),
	CONSTRAINT "wallet_histories_status_check" CHECK ((status)::text = ANY ((ARRAY['processed'::character varying, 'paid'::character varying, 'rejected'::character varying, 'canceled'::character varying])::text[]))
);
--> statement-breakpoint
CREATE TABLE "payments" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"tag" varchar(255),
	"input" smallint DEFAULT '2' NOT NULL,
	"client_id" varchar(191),
	"secret_id" varchar(191),
	"sandbox" boolean DEFAULT false NOT NULL,
	"active" boolean DEFAULT true NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "payment_translations" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"payment_id" bigint NOT NULL,
	"locale" varchar(255) NOT NULL,
	"title" varchar(255) NOT NULL,
	"client_title" varchar(191),
	"secret_title" varchar(191),
	CONSTRAINT "payment_translations_payment_id_locale_unique" UNIQUE("payment_id","locale")
);
--> statement-breakpoint
CREATE TABLE "sms_gateways" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"title" varchar(191) NOT NULL,
	"from" varchar(255) DEFAULT 'go-shop' NOT NULL,
	"type" varchar(255) NOT NULL,
	"api_key" varchar(255),
	"secret_key" varchar(255),
	"service_id" varchar(255),
	"text" varchar(191),
	"active" boolean DEFAULT false NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "social_providers" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"user_id" bigint NOT NULL,
	"provider" varchar(255) NOT NULL,
	"provider_id" varchar(255) NOT NULL,
	"avatar" varchar(255),
	"created_at" timestamp(0),
	"updated_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "likes" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"likable_type" varchar(255) NOT NULL,
	"likable_id" bigint NOT NULL,
	"user_id" bigint NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "term_conditions" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "points" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"shop_id" bigint,
	"type" varchar(255) DEFAULT 'fix' NOT NULL,
	"price" double precision DEFAULT '0' NOT NULL,
	"value" integer DEFAULT 0 NOT NULL,
	"active" boolean DEFAULT true NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "user_points" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"user_id" bigint NOT NULL,
	"price" double precision DEFAULT '0' NOT NULL
);
--> statement-breakpoint
CREATE TABLE "point_histories" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"user_id" bigint NOT NULL,
	"order_id" bigint NOT NULL,
	"price" double precision DEFAULT '0' NOT NULL,
	"note" varchar(255),
	"created_at" timestamp(0),
	"updated_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "term_condition_translations" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"term_condition_id" bigint NOT NULL,
	"title" varchar(255) NOT NULL,
	"description" text NOT NULL,
	"locale" varchar(255) NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	CONSTRAINT "term_condition_translations_term_condition_id_locale_unique" UNIQUE("term_condition_id","locale")
);
--> statement-breakpoint
CREATE TABLE "discounts" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"shop_id" bigint NOT NULL,
	"type" varchar(255) NOT NULL,
	"price" double precision NOT NULL,
	"start" date DEFAULT '2024-12-20' NOT NULL,
	"end" date,
	"active" boolean DEFAULT true NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	"img" varchar(255),
	CONSTRAINT "discounts_type_check" CHECK ((type)::text = ANY ((ARRAY['fix'::character varying, 'percent'::character varying])::text[]))
);
--> statement-breakpoint
CREATE TABLE "privacy_policies" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0)
);
--> statement-breakpoint
CREATE TABLE "privacy_policy_translations" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"privacy_policy_id" bigint NOT NULL,
	"title" varchar(255) NOT NULL,
	"description" text NOT NULL,
	"locale" varchar(255) NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	CONSTRAINT "privacy_policy_translations_privacy_policy_id_locale_unique" UNIQUE("privacy_policy_id","locale")
);
--> statement-breakpoint
CREATE TABLE "user_addresses" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"user_id" bigint NOT NULL,
	"title" varchar(191) DEFAULT 'My Address' NOT NULL,
	"address" text NOT NULL,
	"location" varchar(255),
	"default" boolean DEFAULT false NOT NULL,
	"active" boolean DEFAULT true NOT NULL,
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	"deleted_at" timestamp(0),
	"name" varchar(255),
	"surname" varchar(255),
	"birth_date" date,
	"gender" varchar(255),
	"email" varchar(255),
	"passport_number" varchar(255),
	"passport_secret" varchar(255),
	"number" varchar(255),
	"user_delivery_id" integer,
	"province" varchar(255),
	"apartment" varchar(255),
	"postcode" varchar(255),
	"company_name" varchar(255),
	"city" varchar(255),
	"note" varchar(255)
);
--> statement-breakpoint
CREATE TABLE "orders" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"user_id" bigint NOT NULL,
	"price" double precision NOT NULL,
	"currency_id" bigint NOT NULL,
	"rate" integer DEFAULT 1 NOT NULL,
	"note" varchar(191),
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	"deleted_at" timestamp(0),
	"usd_price" double precision,
	"status" varchar(255),
	"total_delivery_fee" double precision,
	"user_address_id" integer,
	"track_code" integer,
	"declaration_id" integer,
	"tax" double precision,
	"delivery_id" integer NOT NULL,
	"country_id" integer
);
--> statement-breakpoint
CREATE TABLE "users" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"uuid" uuid NOT NULL,
	"firstname" varchar(255) DEFAULT 'firstname' NOT NULL,
	"lastname" varchar(255),
	"email" varchar(255),
	"phone" varchar(255),
	"birthday" date,
	"gender" varchar(255) DEFAULT 'male' NOT NULL,
	"email_verified_at" timestamp(0),
	"phone_verified_at" timestamp(0),
	"ip_address" "inet",
	"active" boolean DEFAULT true NOT NULL,
	"img" varchar(255),
	"firebase_token" varchar(255),
	"password" varchar(255),
	"remember_token" varchar(100),
	"created_at" timestamp(0),
	"updated_at" timestamp(0),
	"deleted_at" timestamp(0),
	"role" varchar DEFAULT 'admin',
	"registered_at" timestamp,
	CONSTRAINT "users_email_unique" UNIQUE("email"),
	CONSTRAINT "users_phone_unique" UNIQUE("phone"),
	CONSTRAINT "users_gender_check" CHECK ((gender)::text = ANY ((ARRAY['male'::character varying, 'female'::character varying])::text[]))
);
--> statement-breakpoint
CREATE TABLE "telescope_entries_tags" (
	"entry_uuid" uuid NOT NULL,
	"tag" varchar(255) NOT NULL,
	CONSTRAINT "telescope_entries_tags_pkey" PRIMARY KEY("entry_uuid","tag")
);
--> statement-breakpoint
CREATE TABLE "role_has_permissions" (
	"permission_id" bigint NOT NULL,
	"role_id" bigint NOT NULL,
	CONSTRAINT "role_has_permissions_pkey" PRIMARY KEY("permission_id","role_id")
);
--> statement-breakpoint
CREATE TABLE "model_has_permissions" (
	"permission_id" bigint NOT NULL,
	"model_type" varchar(255) NOT NULL,
	"model_id" bigint NOT NULL,
	CONSTRAINT "model_has_permissions_pkey" PRIMARY KEY("permission_id","model_type","model_id")
);
--> statement-breakpoint
CREATE TABLE "model_has_roles" (
	"role_id" bigint NOT NULL,
	"model_type" varchar(255) NOT NULL,
	"model_id" bigint NOT NULL,
	CONSTRAINT "model_has_roles_pkey" PRIMARY KEY("role_id","model_type","model_id")
);
--> statement-breakpoint
ALTER TABLE "category_translations" ADD CONSTRAINT "category_translations_category_id_foreign" FOREIGN KEY ("category_id") REFERENCES "public"."categories"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "shop_translations" ADD CONSTRAINT "shop_translations_shop_id_foreign" FOREIGN KEY ("shop_id") REFERENCES "public"."shops"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "invitations" ADD CONSTRAINT "invitations_shop_id_foreign" FOREIGN KEY ("shop_id") REFERENCES "public"."shops"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "invitations" ADD CONSTRAINT "invitations_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "shop_subscriptions" ADD CONSTRAINT "shop_subscriptions_shop_id_foreign" FOREIGN KEY ("shop_id") REFERENCES "public"."shops"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "delivery_translations" ADD CONSTRAINT "delivery_translations_delivery_id_foreign" FOREIGN KEY ("delivery_id") REFERENCES "public"."deliveries"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "shops" ADD CONSTRAINT "shops_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "unit_translations" ADD CONSTRAINT "unit_translations_unit_id_foreign" FOREIGN KEY ("unit_id") REFERENCES "public"."units"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "product_translations" ADD CONSTRAINT "product_translations_product_id_foreign" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "product_properties" ADD CONSTRAINT "product_properties_product_id_foreign" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "products" ADD CONSTRAINT "products_brand_id_foreign" FOREIGN KEY ("brand_id") REFERENCES "public"."brands"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "products" ADD CONSTRAINT "products_category_id_foreign" FOREIGN KEY ("category_id") REFERENCES "public"."categories"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "products" ADD CONSTRAINT "products_shop_id_foreign" FOREIGN KEY ("shop_id") REFERENCES "public"."shops"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "products" ADD CONSTRAINT "products_unit_id_foreign" FOREIGN KEY ("unit_id") REFERENCES "public"."units"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "extra_group_translations" ADD CONSTRAINT "extra_group_translations_extra_group_id_foreign" FOREIGN KEY ("extra_group_id") REFERENCES "public"."extra_groups"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "product_extras" ADD CONSTRAINT "product_extras_product_id_foreign" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "extra_values" ADD CONSTRAINT "extra_values_extra_group_id_foreign" FOREIGN KEY ("extra_group_id") REFERENCES "public"."extra_groups"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "order_details" ADD CONSTRAINT "order_details_delivery_address_id_foreign" FOREIGN KEY ("delivery_address_id") REFERENCES "public"."user_addresses"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "order_details" ADD CONSTRAINT "order_details_delivery_type_id_foreign" FOREIGN KEY ("delivery_type_id") REFERENCES "public"."deliveries"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "order_details" ADD CONSTRAINT "order_details_order_id_foreign" FOREIGN KEY ("order_id") REFERENCES "public"."orders"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "order_details" ADD CONSTRAINT "order_details_shop_id_foreign" FOREIGN KEY ("shop_id") REFERENCES "public"."shops"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "order_products" ADD CONSTRAINT "order_products_order_detail_id_foreign" FOREIGN KEY ("order_detail_id") REFERENCES "public"."order_details"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "order_products" ADD CONSTRAINT "order_products_stock_id_foreign" FOREIGN KEY ("stock_id") REFERENCES "public"."stocks"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "order_coupons" ADD CONSTRAINT "order_coupons_order_id_foreign" FOREIGN KEY ("order_id") REFERENCES "public"."orders"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "product_discounts" ADD CONSTRAINT "product_discounts_discount_id_foreign" FOREIGN KEY ("discount_id") REFERENCES "public"."discounts"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "product_discounts" ADD CONSTRAINT "product_discounts_product_id_foreign" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "coupons" ADD CONSTRAINT "coupons_shop_id_foreign" FOREIGN KEY ("shop_id") REFERENCES "public"."shops"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "coupon_translations" ADD CONSTRAINT "coupon_translations_coupon_id_foreign" FOREIGN KEY ("coupon_id") REFERENCES "public"."coupons"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "reviews" ADD CONSTRAINT "reviews_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "banners" ADD CONSTRAINT "banners_shop_id_foreign" FOREIGN KEY ("shop_id") REFERENCES "public"."shops"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "banner_translations" ADD CONSTRAINT "banner_translations_banner_id_foreign" FOREIGN KEY ("banner_id") REFERENCES "public"."banners"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "backup_histories" ADD CONSTRAINT "backup_histories_created_by_foreign" FOREIGN KEY ("created_by") REFERENCES "public"."users"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "stock_extras" ADD CONSTRAINT "stock_extras_extra_value_id_foreign" FOREIGN KEY ("extra_value_id") REFERENCES "public"."extra_values"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "stock_extras" ADD CONSTRAINT "stock_extras_stock_id_foreign" FOREIGN KEY ("stock_id") REFERENCES "public"."stocks"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "blogs" ADD CONSTRAINT "blogs_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "blog_translations" ADD CONSTRAINT "blog_translations_blog_id_foreign" FOREIGN KEY ("blog_id") REFERENCES "public"."blogs"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "faq_translations" ADD CONSTRAINT "faq_translations_faq_id_foreign" FOREIGN KEY ("faq_id") REFERENCES "public"."faqs"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "transactions" ADD CONSTRAINT "transactions_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "wallets" ADD CONSTRAINT "wallets_currency_id_foreign" FOREIGN KEY ("currency_id") REFERENCES "public"."currencies"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "wallets" ADD CONSTRAINT "wallets_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "wallet_histories" ADD CONSTRAINT "wallet_histories_created_by_foreign" FOREIGN KEY ("created_by") REFERENCES "public"."users"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "wallet_histories" ADD CONSTRAINT "wallet_histories_transaction_id_foreign" FOREIGN KEY ("transaction_id") REFERENCES "public"."transactions"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "payment_translations" ADD CONSTRAINT "payment_translations_payment_id_foreign" FOREIGN KEY ("payment_id") REFERENCES "public"."payments"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "social_providers" ADD CONSTRAINT "social_providers_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "likes" ADD CONSTRAINT "likes_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "points" ADD CONSTRAINT "points_shop_id_foreign" FOREIGN KEY ("shop_id") REFERENCES "public"."shops"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "user_points" ADD CONSTRAINT "user_points_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "point_histories" ADD CONSTRAINT "point_histories_order_id_foreign" FOREIGN KEY ("order_id") REFERENCES "public"."orders"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "point_histories" ADD CONSTRAINT "point_histories_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "term_condition_translations" ADD CONSTRAINT "term_condition_translations_term_condition_id_foreign" FOREIGN KEY ("term_condition_id") REFERENCES "public"."term_conditions"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "discounts" ADD CONSTRAINT "discounts_shop_id_foreign" FOREIGN KEY ("shop_id") REFERENCES "public"."shops"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "privacy_policy_translations" ADD CONSTRAINT "privacy_policy_translations_privacy_policy_id_foreign" FOREIGN KEY ("privacy_policy_id") REFERENCES "public"."privacy_policies"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "user_addresses" ADD CONSTRAINT "user_addresses_user_id_foreign" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "telescope_entries_tags" ADD CONSTRAINT "telescope_entries_tags_entry_uuid_foreign" FOREIGN KEY ("entry_uuid") REFERENCES "public"."telescope_entries"("uuid") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "role_has_permissions" ADD CONSTRAINT "role_has_permissions_permission_id_foreign" FOREIGN KEY ("permission_id") REFERENCES "public"."permissions"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "role_has_permissions" ADD CONSTRAINT "role_has_permissions_role_id_foreign" FOREIGN KEY ("role_id") REFERENCES "public"."roles"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "model_has_permissions" ADD CONSTRAINT "model_has_permissions_permission_id_foreign" FOREIGN KEY ("permission_id") REFERENCES "public"."permissions"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "model_has_roles" ADD CONSTRAINT "model_has_roles_role_id_foreign" FOREIGN KEY ("role_id") REFERENCES "public"."roles"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
CREATE INDEX "password_resets_email_index" ON "password_resets" USING btree ("email" text_ops);--> statement-breakpoint
CREATE INDEX "telescope_entries_batch_id_index" ON "telescope_entries" USING btree ("batch_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "telescope_entries_created_at_index" ON "telescope_entries" USING btree ("created_at" timestamp_ops);--> statement-breakpoint
CREATE INDEX "telescope_entries_family_hash_index" ON "telescope_entries" USING btree ("family_hash" text_ops);--> statement-breakpoint
CREATE INDEX "telescope_entries_type_should_display_on_index_index" ON "telescope_entries" USING btree ("type" text_ops,"should_display_on_index" text_ops);--> statement-breakpoint
CREATE INDEX "personal_access_tokens_tokenable_type_tokenable_id_index" ON "personal_access_tokens" USING btree ("tokenable_type" int8_ops,"tokenable_id" int8_ops);--> statement-breakpoint
CREATE INDEX "categories_parent_id_index" ON "categories" USING btree ("parent_id" int8_ops);--> statement-breakpoint
CREATE INDEX "categories_uuid_index" ON "categories" USING btree ("uuid" uuid_ops);--> statement-breakpoint
CREATE INDEX "category_translations_locale_index" ON "category_translations" USING btree ("locale" text_ops);--> statement-breakpoint
CREATE INDEX "galleries_loadable_id_index" ON "galleries" USING btree ("loadable_id" int8_ops);--> statement-breakpoint
CREATE INDEX "galleries_loadable_type_index" ON "galleries" USING btree ("loadable_type" text_ops);--> statement-breakpoint
CREATE INDEX "galleries_loadable_type_loadable_id_index" ON "galleries" USING btree ("loadable_type" int8_ops,"loadable_id" int8_ops);--> statement-breakpoint
CREATE INDEX "sessions_last_activity_index" ON "sessions" USING btree ("last_activity" int4_ops);--> statement-breakpoint
CREATE INDEX "sessions_user_id_index" ON "sessions" USING btree ("user_id" int8_ops);--> statement-breakpoint
CREATE INDEX "brands_uuid_index" ON "brands" USING btree ("uuid" uuid_ops);--> statement-breakpoint
CREATE INDEX "shop_translations_locale_index" ON "shop_translations" USING btree ("locale" text_ops);--> statement-breakpoint
CREATE INDEX "delivery_translations_locale_index" ON "delivery_translations" USING btree ("locale" text_ops);--> statement-breakpoint
CREATE INDEX "shops_uuid_index" ON "shops" USING btree ("uuid" uuid_ops);--> statement-breakpoint
CREATE INDEX "unit_translations_locale_index" ON "unit_translations" USING btree ("locale" text_ops);--> statement-breakpoint
CREATE INDEX "product_translations_locale_index" ON "product_translations" USING btree ("locale" text_ops);--> statement-breakpoint
CREATE INDEX "product_properties_locale_index" ON "product_properties" USING btree ("locale" text_ops);--> statement-breakpoint
CREATE INDEX "products_uuid_index" ON "products" USING btree ("uuid" uuid_ops);--> statement-breakpoint
CREATE INDEX "extra_group_translations_locale_index" ON "extra_group_translations" USING btree ("locale" text_ops);--> statement-breakpoint
CREATE INDEX "stocks_countable_id_index" ON "stocks" USING btree ("countable_id" int8_ops);--> statement-breakpoint
CREATE INDEX "stocks_countable_type_countable_id_index" ON "stocks" USING btree ("countable_type" int8_ops,"countable_id" int8_ops);--> statement-breakpoint
CREATE INDEX "stocks_countable_type_index" ON "stocks" USING btree ("countable_type" text_ops);--> statement-breakpoint
CREATE INDEX "order_details_delivery_address_id_index" ON "order_details" USING btree ("delivery_address_id" int8_ops);--> statement-breakpoint
CREATE INDEX "order_details_deliveryman_index" ON "order_details" USING btree ("deliveryman" int8_ops);--> statement-breakpoint
CREATE INDEX "coupon_translations_locale_index" ON "coupon_translations" USING btree ("locale" text_ops);--> statement-breakpoint
CREATE INDEX "jobs_queue_index" ON "jobs" USING btree ("queue" text_ops);--> statement-breakpoint
CREATE INDEX "reviews_reviewable_id_index" ON "reviews" USING btree ("reviewable_id" int8_ops);--> statement-breakpoint
CREATE INDEX "reviews_reviewable_type_index" ON "reviews" USING btree ("reviewable_type" text_ops);--> statement-breakpoint
CREATE INDEX "reviews_reviewable_type_reviewable_id_index" ON "reviews" USING btree ("reviewable_type" text_ops,"reviewable_id" int8_ops);--> statement-breakpoint
CREATE INDEX "banners_type_index" ON "banners" USING btree ("type" text_ops);--> statement-breakpoint
CREATE INDEX "banner_translations_locale_index" ON "banner_translations" USING btree ("locale" text_ops);--> statement-breakpoint
CREATE INDEX "tickets_uuid_index" ON "tickets" USING btree ("uuid" uuid_ops);--> statement-breakpoint
CREATE INDEX "blogs_type_index" ON "blogs" USING btree ("type" int2_ops);--> statement-breakpoint
CREATE INDEX "blogs_uuid_index" ON "blogs" USING btree ("uuid" uuid_ops);--> statement-breakpoint
CREATE INDEX "blog_translations_locale_index" ON "blog_translations" USING btree ("locale" text_ops);--> statement-breakpoint
CREATE INDEX "faqs_uuid_index" ON "faqs" USING btree ("uuid" uuid_ops);--> statement-breakpoint
CREATE INDEX "faq_translations_locale_index" ON "faq_translations" USING btree ("locale" text_ops);--> statement-breakpoint
CREATE INDEX "transactions_payable_id_index" ON "transactions" USING btree ("payable_id" int8_ops);--> statement-breakpoint
CREATE INDEX "transactions_payable_type_index" ON "transactions" USING btree ("payable_type" text_ops);--> statement-breakpoint
CREATE INDEX "transactions_payable_type_payable_id_index" ON "transactions" USING btree ("payable_type" int8_ops,"payable_id" int8_ops);--> statement-breakpoint
CREATE INDEX "transactions_status_index" ON "transactions" USING btree ("status" text_ops);--> statement-breakpoint
CREATE INDEX "transactions_status_user_id_index" ON "transactions" USING btree ("status" int8_ops,"user_id" int8_ops);--> statement-breakpoint
CREATE INDEX "wallets_uuid_index" ON "wallets" USING btree ("uuid" uuid_ops);--> statement-breakpoint
CREATE INDEX "wallet_histories_type_index" ON "wallet_histories" USING btree ("type" text_ops);--> statement-breakpoint
CREATE INDEX "payment_translations_locale_index" ON "payment_translations" USING btree ("locale" text_ops);--> statement-breakpoint
CREATE INDEX "likes_likable_id_index" ON "likes" USING btree ("likable_id" int8_ops);--> statement-breakpoint
CREATE INDEX "likes_likable_type_index" ON "likes" USING btree ("likable_type" text_ops);--> statement-breakpoint
CREATE INDEX "likes_likable_type_likable_id_index" ON "likes" USING btree ("likable_type" int8_ops,"likable_id" int8_ops);--> statement-breakpoint
CREATE INDEX "term_condition_translations_locale_index" ON "term_condition_translations" USING btree ("locale" text_ops);--> statement-breakpoint
CREATE INDEX "privacy_policy_translations_locale_index" ON "privacy_policy_translations" USING btree ("locale" text_ops);--> statement-breakpoint
CREATE INDEX "users_uuid_index" ON "users" USING btree ("uuid" uuid_ops);--> statement-breakpoint
CREATE INDEX "telescope_entries_tags_tag_index" ON "telescope_entries_tags" USING btree ("tag" text_ops);--> statement-breakpoint
CREATE INDEX "model_has_permissions_model_id_model_type_index" ON "model_has_permissions" USING btree ("model_id" int8_ops,"model_type" int8_ops);--> statement-breakpoint
CREATE INDEX "model_has_roles_model_id_model_type_index" ON "model_has_roles" USING btree ("model_id" int8_ops,"model_type" int8_ops);
*/